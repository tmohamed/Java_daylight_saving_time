server.port=9096

management.health.circuitbreakers.enabled=true
#management.health.ratelimiters.enabled=true

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

spring.jackson.serialization.indent-output=true

# Property make sense when calculating the failure against the number of failed transaction, not 'slow'
# So, we can neglect its value
#resilience4j.circuitbreaker.instances.CircuitBreakerService.failure-rate-threshold=4

# This doesn't make sense for COUNT BASED mechanism, Affects only TIME BASED
# So, we can neglect its value
#resilience4j.circuitbreaker.instances.CircuitBreakerService.minimum-number-of-calls=5

resilience4j.circuitbreaker.instances.CircuitBreakerService.automatic-transition-from-open-to-half-open-enabled=true

# For how long the Circuit remains OPEN before transition to HALF-OPEN
resilience4j.circuitbreaker.instances.CircuitBreakerService.wait-duration-in-open-state=5s

# In half-open state, the sliding window size changed to this number,
# and after performing all permitted transactions, re-check the threshold on the new window size
# once the circuit back to CLOSED, the sliding window size goes to the original value
resilience4j.circuitbreaker.instances.CircuitBreakerService.permitted-number-of-calls-in-half-open-state=5

# keeps all attempts, and start taking action once we have 10 transactions recorded
# and the number of slow transactions recorded exceeds the configured threshold
resilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-size=10

# First mode is COUNT_BASED, as we're monitoring the count of 'slow' transactions at any point of time
# Second mode is TIME_BASED, as we're monitoring the count of 'slow' transactions at specific period of time (during a min for example)
resilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-type=count_based

# Percentage value, this ratio is calculated against the sliding window size
# So, to consider the Circuit OPEN then 10% of sliding window side should be considered 'slow' transaction
# ex. for sliding window 10 and 1 trx 'slow' Then Circuit will be OPEN
resilience4j.circuitbreaker.instances.CircuitBreakerService.slow-call-rate-threshold=40

# the time by which we consider the transaction 'slow'
resilience4j.circuitbreaker.instances.CircuitBreakerService.slow-call-duration-threshold=2s

resilience4j.circuitbreaker.metrics.enabled=true
resilience4j.circuitbreaker.metrics.legacy.enabled=true
resilience4j.circuitbreaker.instances.CircuitBreakerService.register-health-indicator=true
resilience4j.circuitbreaker.instances.CircuitBreakerService.event-consumer-buffer-size=10



